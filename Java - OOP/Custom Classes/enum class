// enum class
public enum ClothingSize {
    S("Small"), M("Medium"), L("Large");

    // string description
    private String description;

    // constructor to describe string items
    ClothingSize(String description) {
        this.description = description;
    }

    /* use the override to string method to display the size description
    instead of the size letter description
    */
    @Override
    public String toString() {
        return description;
    }
}






// ClothingItem class
public class ClothingItem {
    // constant variables
    public static final String SHIRT = "Shirt";
    public static final String PANTS = "Pants";
    public static final String SHOES = "Shoes";

    private String type;
    private ClothingSize size;
    private double price;
    private int quantity;

    public ClothingItem(String type, ClothingSize size, double price, int quantity) {
        this.type = type;
        this.size = size;
        this.price = price;
        this.quantity = quantity;
    }

    public String getType() {return type;}

    public void setType(String type) {this.type = type;}

    public ClothingSize getSize() {return size;}

    public void setSize(ClothingSize size) {this.size = size;}

    public double getPrice() {return price;}

    public void setPrice(double price) {this.price = price;}

    public int getQuantity() {return quantity;}

    public void setQuantity(int quantity) {this.quantity = quantity;}
}






// main program
public class Main {

    public static void main(String[] args) {

        var item = new ClothingItem(ClothingItem.SHIRT,
                ClothingSize.L,
                19.99,
                3);

        var totalPrice = item.getPrice() * item.getQuantity();
        var formatter = NumberFormat.getCurrencyInstance();
        var output = String.format("Your %s %s order will cost %s",
                item.getSize(),
                item.getType(),
                formatter.format(totalPrice));
        System.out.println(output);
    }
}
